<?php

/**
 * @file
 * Contains ahs_discussions hooks.
 */

use Drupal\Core\Url;

use Drupal\comment\Entity\Comment;
use \Drupal\node\NodeInterface;
use \Drupal\Core\Session\AccountInterface;
use Drupal\Core\Access\AccessResult;

/**
 * Implements hook_node_update().
 *
 * Update the parents reference on child discussions,
 * and childrens reference on parent discussions.
 */
function ahs_discussions_node_update(\Drupal\Core\Entity\EntityInterface $node) {
  if ($node->bundle() == 'discussion'){
    \Drupal::service('ahs_cer.simple_cer')->updateReferences('field_children', 'field_parents', $node, TRUE);
    \Drupal::service('ahs_cer.simple_cer')->updateReferences('field_parents', 'field_children', $node, TRUE);
    \Drupal::service('ahs_discussions.ancestry')->updateChildren($node);
    
    // This comparison must not be strict (!==). For some strange reason,
    // one is an integer and the other a string.
    if ($node->getRevisionId() != $node->original->getRevisionId()) {
      $comment = [
        'comment_type' => 'comments_with_changes',
        'field_name' => 'field_comments_with_changes',
        'subject' => 'Change record',
      ];
      \Drupal::service('changes.comment_with_changes')
        ->add($comment, $node, $node->original->getRevisionId(), $node->getRevisionId(), 'field_changes');
    }
  }
}

/**
 * Implements hook_entity_insert().
 *
 * Create a parents reference on child discussions,
 * and childrens reference on parent discussions.
 * We have to use hook_entity_insert not hook_node_insert because of D#2604518.
 * @todo switch back to hook_node_insert when Drupal issue is fixed.
 */
function ahs_discussions_entity_insert(\Drupal\Core\Entity\EntityInterface $node) {
  if (
    $node->getEntityTypeId() == 'node' &&
    $node->bundle() == 'discussion' &&
    $node->hasField('field_parents') &&
    $node->hasField('field_children')
  ) {
    // Initial comment creation must before cer updates on entity_insert,
    // otherwise the cerupdates will trigger a parent update and therefore an
    // comment before this initial comment is triggered.
    // Skip this when programatically autocreating root node
    // because the config has not been imported yet so will fail.
    if ($node->label() !== "Discuss") {
      $comment = [
        'comment_type' => 'comments_with_changes',
        'field_name' => 'field_comments_with_changes',
        'subject' => 'Discussion started',
        'comment_body' => [
          'value' => "<p>Started this discussion.</p>",
          'format' => "full_html",
        ]
      ];
      \Drupal::service('changes.comment_with_changes')
        ->add($comment, $node, NULL, $node->getRevisionId(), 'field_changes');
    }


    \Drupal::service('ahs_cer.simple_cer')->updateReferences('field_children', 'field_parents', $node, TRUE);
    \Drupal::service('ahs_cer.simple_cer')->updateReferences('field_parents', 'field_children', $node, TRUE);
    \Drupal::service('ahs_discussions.ancestry')->updateChildren($node);
  }
}

/**
 * Implements hook_node_presave().
 *
 * Update the ancestry when the first parent is changed.
 * No need to save or return modified entity.
 */
function ahs_discussions_node_presave(\Drupal\Core\Entity\EntityInterface $node) {
  if ($node->bundle() == 'discussion'){
    \Drupal::service('ahs_discussions.ancestry')->updateOwnAncestry($node);
  }
}

/**
 * Implements hook_entity_type_build().
 *
 * Registers operation class for ahs_discuss form mode.
 */
function ahs_discussions_entity_type_build(array &$entity_types) {
  /** @var $entity_types \Drupal\Core\Entity\EntityTypeInterface[] */
  // Add a form for a custom node form without overriding the default
  // node form. To override the default node form, use hook_entity_type_alter().
  $entity_types['node']->setFormClass('ahs_discuss', 'Drupal\ahs_discussions\DiscussionForm');
}

/**
 * Implements hook_editor_js_settings_alter
 *
 * Allows the CKEditor on the body field to grow longer than the page length
 */
/*
function ahs_discussions_editor_js_settings_alter(array &$settings) {
  foreach ($settings['editor']['formats'] as $name => $value) {
    $settings['editor']['formats'][$name]['editorSettings']['autoGrow_maxHeight'] = '10000';
  }
}
*/

/**
 * Implements hook_form_alter_alter
 *
 * Remove parts of the discussion form that are added by other modules
 */
function ahs_discussions_form_node_discussion_ahs_discuss_form_alter(&$form, &$form_state) {
  // Remove the menu settings
  //$form['menu']['#access']=FALSE;
  // Remove the delete button
  $form['actions']['delete']['#access'] = FALSE;
  $form['actions']['submit']['#attributes']['data-spy'] = 'affix';

  // If there is no referenced parent, fake a 'Discuss' pseudo-breadcrumb
  // This is necessary because usually this root pseudo-breadcrumb comes
  // from the node--discuss--ahs-ancestry template used for the ahs_ancestry
  // view mode of the referenced parent entity.
  /*
  if ($form['field_parents']['widget']['#max_delta'] === 0) {
    $discussPath = Url::fromRoute('view.discussions.page_1')->toString();
    $preview= [
      '#markup' => '<ol class="breadcrumb"><li><a href="' . $discussPath . '">' . t('Discuss') . '</a></li>',
    ];
    $form['field_parents']['widget']['0']['preview_container'] = [
      '#type' => 'container',
      '#attributes' => [
        'class' => ['er-enhanced-preview'],
      ],
      'preview' => $preview,
    ];
    $form['field_parents']['widget']['0']['#prefix'] = '<div class="er-enhanced-new er-enhanced-previewing ahs-newonly">';
  }
  */
//  $form['field_parents']['widget']['0']['target_id']['#required'] = TRUE;
//  $form['field_parents']['widget']['0']['target_id']['#required_error'] = t('Please choose a discussion that this is part of.');
}

/**
 * Implements hook_module_implements_alter
 *
 * Moves our hook ahs_discussions_form_node_discussion_ahs_discuss_form_alter
 * so that it fires last and can undo the work of other modules.
 */
function ahs_discussions_module_implements_alter(&$implementations, $hook) {
  if ($hook === 'entity_insert') {
    // Move our entity insert hook to the end, so that comment module can prepare
    // the statistics table before we create a comment. See  D#2604518.
    // @todo switch back to hook_node_insert when Drupal issue is fixed.
    if (isset($implementations['ahs_discussions'])) {
      $group = $implementations['ahs_discussions'];
      unset($implementations['ahs_discussions']);
      $implementations['ahs_discussions'] = $group;
    }
  }
  if ($hook === 'form_alter') {
    // Move our form alter to the end, to give it priority over menu module's.
    if (isset($implementations['ahs_discussions'])) {
      $group = $implementations['ahs_discussions'];
      unset($implementations['ahs_discussions']);
      $implementations['ahs_discussions'] = $group;
    }
  }
}

  /**
   * Implements hook_field_widget_form_alter().
   */
  function ahs_discussions_field_widget_entity_reference_autocomplete_form_alter(&$element, \Drupal\Core\Form\FormStateInterface $form_state, $context) {
    $items = $context['items'];
    $fieldName = $items->getFieldDefinition()->getName();
    if ($fieldName === 'field_parents') {
      ahs_discussion_addPreview($element, $items,  $context['delta'], 'ahs_discuss', FALSE);
      ahs_discussion_addRemove($element);
    }
  }

/**
 * Implements hook_field_widget_form_alter().
 */
function ahs_discussions_field_widget_ahs_entity_reference_with_views_autocreate_form_alter(&$element, \Drupal\Core\Form\FormStateInterface $form_state, $context) {
  $items = $context['items'];
  $fieldName = $items->getFieldDefinition()->getName();
  if ($fieldName === 'field_children') {
    ahs_discussion_addPreview($element, $items,  $context['delta'], 'ahs_discuss', FALSE);
    //ahs_discussion_addRemove($element);
  }
}

/**
 * Implements hook_field_widget_form_alter().
 */
function ahs_discussions_field_widget_comment_default_form_alter(&$element, \Drupal\Core\Form\FormStateInterface $form_state, $context) {
  $items = $context['items'];
  $fieldName = $items->getFieldDefinition()->getName();
   if ($fieldName === 'field_comments_with_changes') {
     $element['status']['#access'] = FALSE;
    ahs_discussion_addPreview($element, $items,  $context['delta'], 'ahs_discuss');
  }
}

/**
 * Implements hook_field_widget_form_alter().
 */
function ahs_discussions_field_widget_text_textarea_with_summary_form_alter(&$element, \Drupal\Core\Form\FormStateInterface $form_state, $context) {
  $items = $context['items'];
  $fieldName = $items->getFieldDefinition()->getName();
  if ($fieldName === 'body') {
    ahs_discussion_addPreview($element, $items,  $context['delta'], 'default', FALSE);
    //$element['#prefix'] = '<div class="ahs-preview-hide-edit-requested">';
    //$element['#suffix'] = '</div>';
  }
}

/**
 * Implements hook_field_widget_form_alter().
 */
function ahs_discussions_field_widget_file_generic_form_alter(&$element, \Drupal\Core\Form\FormStateInterface $form_state, $context) {
  $items = $context['items'];
  $fieldName = $items->getFieldDefinition()->getName();
  if ($fieldName === 'field_files') {
    //ahs_discussion_addPreview($element, $items,  $context['delta'], 'default', FALSE);
  }
}

function ahs_discussion_addPreview (&$element, $items, $delta, $viewMode = 'default', $alwaysHideEdit = TRUE) {
    // Add preview.
    $preview = $items[$delta]->view($viewMode);
    $element['preview_container'] = [
      '#type' => 'container',
      '#attributes' => [
        'class' => ['ahs-preview-preview'],
      ],
      'preview' => $preview,
    ];
  if ($alwaysHideEdit) {
    $element['#prefix'] = '<div class="ahs-preview-hide-edit">';
    $element['#suffix'] = '</div>';
  }
  else {
    $element['#prefix'] = '<div class="ahs-preview-hide-edit-if-hideui">';
    $element['#suffix'] = '</div>';
  }
}

function ahs_discussion_addRemove (&$element) {
  // Add a remove link to the preview.
  $element['ahs_preview_actions']['remove'] = [
    '#markup' => '<a class="ahs-preview-remove" href="">' . t('Remove') . '</a>',
  ];
  $element['#attached']['library'][] = 'ahs_discussions/remove';

}

function ahs_discussion_addEdit (&$element) {
  $element['ahs_preview_actions']['edit'] = [
    '#markup' => '<a class="ahs-preview-edit" href="">' . t('Edit') . '</a>',
  ];
  $element['#attached']['library'][] = 'ahs_discussions/edit';
}

/**
 * Implements hook_theme_suggestions_alter
 * Allow a template for any particular form
 */
/*
function ahs_discussions_theme_suggestions_alter(array &$suggestions, array $variables)
{
  // If this render array is a form
  if (isset($variables['element']) && isset($variables['element']['#type']) && $variables['element']['#type'] == 'form') {
    $original_theme_hook = $variables['theme_hook_original'];

    // Add a template suggestion using the form ID.
    $suggestions[] = $original_theme_hook . '__' . str_replace('-', '_', $variables['element']['#id']);
  }

  return $suggestions;

}
*/

/**
 * Implements hook_node_access
 * Only allow users listed as participants to access a private discussion.
 */
/*
function ahs_discussions_node_access(NodeInterface $node, $op, AccountInterface $account) {
  if( $node->bundle() === 'discussion' && $node->field_private->value){
    $user = $account->id();
    $participants = $ids = array_column($node->field_participants->getValue(), 'target_id');
    return AccessResult::forbiddenIf(!in_array($user, $participants))->cachePerUser()->addCacheableDependency($node);
  }
  else {
    return AccessResult::neutral();
  }
}
*/
